>>To execute script:python words.py

>>To python console: python

>>Commands
	>print 'Hello world!'
	>quit()
	>type(xxx) -> To know the type funciona con constantes y vars

>>VARS
	x = 6
	message = 'xxx'
	pi = 3.22222

>>>Result of a operation in the same format as operators

>>>INPUT
	name = raw_input('What is your name?\n')

>>>Comment -> #
------------------------------------------------------------
Errors: White spaces
	If you are using a text editor to write your scripts, you might run into problems with spaces and tabs. The best way to avoid these problems is to use spacesexclusively (no tabs). Most text editors that know about Python do this by default, but some don’t
Note: None = NoneType != 'None'
------------------------------------------------------------
>>>Conditional execution
	>>if elif else
		>Operators: == != < > >= => (numbers) || x == 'a'
		>Secuences: if x > 0 :
						print 'x is positive'
					elif x < -5 :
						print 'yyy'
					else :
						print 'xxx'
		>Anidation: if a && b :

	>>Catching using try and except
		>Detail: to manage errors for examples
		>inp = raw_input('Enter Fahrenheit Temperature:')
		try:
			fahr = float(inp)
			cel = (fahr - 32.0) * 5.0 / 9.0
			print cel
		except:
			print 'Please enter a number'

>>>Functions
	>>Call function
		>type(32), max(), min(), len()
		>int(), float(), str()
		>import random -> t = [1, 2, 3] random.choice(t), random.randint(5,10)

	>>Adding new functions
		>def print_lyrics():
			print "I'm a lumberjack, and I'm okay."
			print 'I sleep all night and I work all day.'
		>return statement :)

>>>Iteration
		>>While:
			>n = 5
			while n > 0:
				print n
				n = n-1
			print 'Blastoff!'

		>>Break:
			>while True:
				line = raw_input('> ')
				if line == 'done':
					break
				print line
			print 'Done!'

		>>Continue: Sometimes you are in an iteration of a loop and want to finish the current iteration and immediately jump to the next iteration
			>while True:
				line = raw_input('> ')
				if line[0] == '#' :
					continue
				if line == 'done':
					break
				print line
			print 'Done!'

		>>For: 
			>friends = ['Joseph', 'Glenn', 'Sally']
			for friend in friends:
				print 'Happy New Year:', friend
			print 'Done!'

			>count = 0
				for itervar in [3, 41, 12, 9, 74, 15]:
					count = count + 1
				print 'Count: ', count

>>>Strings
		>>Sequence of characters (Start by 0)

		>>String slices
			>s = 'Monty Python'
			print s[0:5]
			
			>fruit = 'banana'
			fruit[:3]

			>'a' in 'banana'
			True

		>>Strings are immutable
			>greeting = 'Hello, world!'
			greeting[0] = 'J'   -------->>>> ERROR!!!!!!!

			>greeting = 'Hello, world!'
			new_greeting = 'J' + greeting[1:]

		>>String methos
			Strings are an example of Python objects.
			An object contains both data (the actual string itself) as well as methods
			dir lists the methods available for an object
				dir(whatever)

		>>Parsing strings
			>data = 'From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008'
			atpos = data.find('@')
			print atpos
			sppos = data.find(' ',atpos)
			print sppos
			host = data[atpos+1:sppos]
			print host

		>>Format operator % : allows us to construct strings, replacing parts of the strings with the data stored in variables. Format sequences specify how the second operand is formatted.
			>camels = 42
			'%d' % camels  -> String 42

			>camels = 42
			'I have spotted %d camels.' % camels
			'I have spotted 42 camels.'

			>'In %d years I have spotted %g %s.' % (3, 0.1, 'camels')
			'In 3 years I have spotted 0.1 camels.'

			Note: %d integers, %g floatings, %s string 

>>>Files
		>>Opening files
			>fhand = open('mbox.txt')
			print fhand
			<open file 'mbox.txt', mode 'r' at 0x1005088b0>

			Note: handle -> open, read, write and close

		>>Reading lines in a file
			>fhand = open('mbox.txt')
				count = 0
				for line in fhand:
				count = count + 1
			print 'Line Count:', count

		>>Read the all file in at once
			fhand = open('mbox-short.txt')
			inp = fhand.read()
			print len(inp)
			94626
			print inp[:20]                 Note: (first 20 characters)
			From stephen.marquar

		>>Writing file: it adds the new data to the end.
			>fout = open('output.txt', 'w')
			line1 = 'This here's the wattle,\n'
			fout.write(line1)
			fout.close()

>>>Lists

		>>Creating:
			>cheeses = ['Cheddar', 'Edam', 'Gouda']
			'Edam' in cheeses (True)
			>numbers = [17, 123]
			>empty = []

		>>List are mutable
			>numbers = [17, 123]
			numbers[1] = 5

		Note: You can think of a list as a relationship between indices and elements. This relationship is called a mapping; each index “maps to” one of the elements.
		Note: If you try to read or write an element that does not exist, you get an IndexError.
		Note: If an index has a negative value, it counts backward from the end of the list.

		>>Traversing a list: you need the indexes
			>for i in range(len(numbers)):
				numbers[i] = numbers[i] * 2

		>>List Operations
			>a = [1, 2, 3]
			b = [4, 5, 6]
			c = a + b
			c=[1, 2, 3, 4, 5, 6]

			>[0] * 4
			[0, 0, 0, 0]

			>[1, 2, 3] * 3 
			[1, 2, 3, 1, 2, 3, 1, 2, 3]

		>>List slices
			>t = ['a', 'b', 'c', 'd', 'e', 'f']
			t[1:3]
			['b', 'c']

			>t[:4]
			['a', 'b', 'c', 'd']

			>t[3:]
			['d', 'e', 'f']

			>t[:]
			['a', 'b', 'c', 'd', 'e', 'f']

		>>List methods
			>t = ['a', 'b', 'c']
			t.append('d')
			['a', 'b', 'c', 'd']

			>t1 = ['a', 'b', 'c']
			t2 = ['d', 'e']
			t1.extend(t2)
			['a', 'b', 'c', 'd', 'e']

			>t = ['d', 'c', 'e', 'b', 'a']
			t.sort()
			['a', 'b', 'c', 'd', 'e']

		>>Deleting elements
			>t = ['a', 'b', 'c']
			x = t.pop(1) || similar del t[1] (del t[5:]) 
			['a', 'c']

			>t = ['a', 'b', 'c']
			t.remove('b')
			['a', 'c']

		>>List and functions
			>len(t), max(t), min(t), sum(t)

			>numlist = list()
			while ( True ) :
				inp = raw_input('Enter a number: ')
				if inp == 'done' : break
				value = float(inp)
				numlist.append(value)
			average = sum(numlist) / len(numlist)
			print 'Average:', average

			>s = 'spam'
			t = list(s)

			>s = 'spam-spam-spam'
			delimiter = '-'
			s.split(delimiter)
			['spam', 'spam', 'spam']

			>t = ['pining', 'for', 'the', 'fjords']
			delimiter = ' '
			delimiter.join(t)
			'pining for the fjords'

		>>Parsing lines
			>fhand = open('mbox-short.txt')
			for line in fhand:
				line = line.rstrip()
				if not line.startswith('From ') : continue
				words = line.split()
			print words[2]

		>>Objects and values
			>a = 'banana'
			b = 'banana'
			a is b
			True

			>a = [1, 2, 3]
			b = [1, 2, 3]
			a is b
			False

		>>Aliasing
			>a = [1, 2, 3]
			b = a
			b is a
			True
			Note: there are two references to the same object

		>>List arguments: When you pass a list to a function, the function gets a reference to the list

			Note: the append method modifies a list, but the + operator creates a new list.

			>def bad_delete_head(t):
				t = t[1:] # WRONG! (it seems like not in/out params)

			>def delete_head(t):
				del t[0]

			>def tail(t):
				return t[1:]

			>letters = ['a', 'b', 'c']
			rest = tail(letters)
			print rest
			['b', 'c']

>>>Dictionaries

	>>Dictionary is a list where the index is a string
	>>Create dic
		>eng2sp=dict{}
		>print eng2sp
		>eng2sp['one'] = 'uno'
	>>The order of a dic is unpredictable
	